setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Github Code")
file.sources = list.files(pattern = "*.R")
sapply(file.sources,source,.GlobalEnv)
sapply(file.sources,source,.GlobalEnv)
#Source the Stochastic Block Model
stochastic.block = function(n,k,p,r,ind,background = FALSE, bn = 0){
##Generate a Stochastic block model
#Function will create a realization of the stochastic block model where each block does not overlap. Here, the probability of an edge between blocks is given by p and the probability of connection within blocks is given by r. (These can be replaced by vectors as well for different probabilities)
#Written by James Wilson
#Input: k = number of blocks
#p = additional probability of connection within blocks (i.e amount over r)
#r = probability of connection between blocks
#size = k vector of sizes for each block
#Requires the use of "Rlab" and "Matrix"
Y = matrix(rep(0,n*k),ncol = k)
for(i in 1:k){
Y[(ind[i]+1):ind[i+1],i] = 1
}
B = diag(rep(1,k))*p + r* rep(1,k) %*% t(rep(1,k))
if(background == TRUE){
M = matrix(rep(bn,(k+1)^2),ncol = k+1)
M[1:k,1:k] = B
B = M
indx = which(rowSums(Y) < 1)
L = rep(0,n)
L[indx] = 1
Y = cbind(Y,L)
}
#ind = c(0,cumsum(size))
#Left Sender community
#Z = 1 - Y
expected.A = Y%*%B%*%t(Y)/2
Adj = matrix(rbern(n^2,matrix(expected.A,ncol = 1)),ncol = n)
#Make this symmetric
Adj = Adj + t(Adj)
Adj[which(Adj > 0)] = 1
diag(Adj) = 0
Adj = Matrix(Adj, sparse = TRUE)
return(Adj)
}
Adjacency <- stochastic.block(1000, 3, 0.15, 0.05, ind = c(0,300,600,1000))
require(Rlab)
require(Matrix)
Adjacency <- stochastic.block(1000, 3, 0.15, 0.05, ind = c(0,300,600,1000))
Results = multilayer.extraction(adjacency, min.score = 0, prop.sample = 0.1)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
adj.sum <- Reduce("+", Adjacency)
adj.sum
adjacency <- Adjacency
if(class(adjacency) != "list"){
adjacency <- list(adjacency)
}
m <- length(adjacency) #total number of layers
if(m == 1){
adj.sum <- adjacency
}
if(m > 1){
adj.sum = Reduce("+", adjacency[1:m])
}
adj.sum
med.connection = median(as.matrix(adj.sum))
as.matrix(adj.sum)
matrix(adj.sum)
adj.sum
matrix(adj.sum)
as.matrix(adj.sum)
median(adj.sum)
median(adj.sum)
median(numeric(adj.sum))
median(as.numeric(adj.sum))
class(adj.sum)
length(adj.sum)
med.connection = median(as.matrix(adj.sum[[1]]))
med.connection
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
score.new
score
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
plot(Results) #clearly there are 3 communities
Final.results <- refine(Results, 3, M = 1, N = 1000)
names(Final.results)
Final.results$Vertices
image(Adjacency)
Adjacency <- stochastic.block(1000, 3, 0.2, 0.05, ind = c(0,300,600,1000))
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.1)
plot(Results) #clearly there are 3 communities
Final.results <- refine(Results, k = 3, M = 1, N = 1000)
Final.results$Vertices
Adjacency <- stochastic.block(5000, 3, 0.2, 0.05, ind = c(0,1000,2600,5000))
image(Adjacency)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
plot(Results) #clearly there are 3 communities
Final.results <- refine(Results, k = 3, M = 1, N = 1000)
Final.results <- refine(Results, k = 3, M = 1, N = 5000)
Final.results$Vertices
head(Results)
adjacency <- Adjacency
if(class(adjacency) != "list"){
adjacency <- list(adjacency)
}
m <- length(adjacency) #total number of layers
n <- dim(adjacency[[1]])[1] #total number of vertices
if(m == 1){
adj.sum <- adjacency
}
if(m > 1){
adj.sum = Reduce("+", adjacency[1:m])
}
med.connection = median(as.matrix(adj.sum[[1]]))
med.connection
thresh = function(x, median.connection, m){
#random choice of layer set
layer.set = sample(1:m, ceiling(m/2))
#vertex set is for those with higher than median connection
vertex.set <- which(x > median.connection)
return(list(vertex.set = vertex.set, layer.set = layer.set))
}
m
neighborhoods <- apply(adj.sum[[1]], 1, thresh, med.connection, m)
prop.sample <- 0.01
keep.sample <- sample(1:n, ceiling(prop.sample*n)) #keep a random sample of the neighborhoods
keep.sample
neighborhoods <- neighborhoods[keep.sample]
neighborhoods
Adjacency <- list()
m = 10
Adjacency <- list()
for(i in 1:m){
Adjacency[[i]] <- stochastic.block(500, 3, 0.2, 0.05, ind = c(0,100,260,500))
}
image(Adjacency[[1]])
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
sapply(file.sources,source,.GlobalEnv)
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
plot(Results) #clearly there are 3 communities
Final.results <- refine(Results, k = 3, M = 1, N = 5000)
Final.results <- refine(Results, k = 3, M = 10, N = 500)
Final.results$Layers
Final.results$Vertices
m = 10
Adjacency <- list()
for(i in 1:m){
Adjacency[[i]] <- stochastic.block(1000, 3, 0.2, 0.05, ind = c(0,100,500,1000))
}
image(Adjacency[[1]])
Results = multilayer.extraction(Adjacency, min.score = 0, prop.sample = 0.01)
plot(Results) #clearly there are 3 communities
Final.results <- refine(Results, k = 3, M = 10, N = 500)
Final.results <- refine(Results, k = 3, M = 10, N = 1000)
Final.results$Vertices
Final.results$Layers
rm(list = ls())
require(Rlab)
require(Matrix)
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Github Code")
file.sources = list.files(pattern = "*.R")
sapply(file.sources,source,.GlobalEnv)
load("/Users/jameswilson/Dropbox/Research/Multilayer_Extraction/Archived/Results_Multilayer/Real Applications/CS_AU_analysis/CS_AU.RData")
load("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/CS_AU_analysis/CS_AU.RData")
results <- multilayer.extraction(Adjacency, prop.sample = 1, min.score = 0, seed = 123)
plot(results)
Final.results <- refine(Results, k = 4, M = length(Adjacency), N = dim(Adjacency[[1]])[1])
Final.results <- refine(results, k = 4, M = length(Adjacency), N = dim(Adjacency[[1]])[1])
Final.results$Vertices
Final.results$Layers
m1 <- length(indx1)
m2 <- length(indx2)
m3 <- length(indx3)
m4 <- length(indx4)
indx1 <- which(Final.results$Vertices[, 1] == 1)
indx2 <- which(Final.results$Vertices[, 2] == 1)
indx3 <- which(Final.results$Vertices[, 3] == 1)
indx4 <- which(Final.results$Vertices[, 4] == 1)
none <- setdiff(1:61, union(union(indx1, indx2),union(indx3, indx4)))
#sizes of each community
m1 <- length(indx1)
m2 <- length(indx2)
m3 <- length(indx3)
m4 <- length(indx4)
m1
m2
m3
m4
re.order <- c(indx1, indx2, indx3, indx4, none)
image(Adjacency[[1]][re.order,re.order])
length(none)
image(Adjacency[[2]][re.order,re.order])
image(Adjacency[[3]][re.order,re.order])
image(Adjacency[[4]][re.order,re.order])
image(Adjacency[[5]][re.order,re.order])
dev.new()
image(Adjacency[[1]][re.order,re.order])
dev.new()
image(Adjacency[[1]][re.order,re.order])
dev.new()
image(Adjacency[[2]][re.order,re.order])
dev.new()
image(Adjacency[[3]][re.order,re.order])
dev.new()
image(Adjacency[[4]][re.order,re.order])
dev.new()
image(Adjacency[[5]][re.order,re.order])
names(Adjacency) <- c("coauthor", "leisure", "work", "lunch", "facebook")
Adjacency[[1]]
names(Adjacency)
Adjacency$coauthor
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Github Code")
save(Adjacency, "AU_CS.Rdata")
save(Adjacency, file = "AU_CS.Rdata")
rm(list = ls())
load("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/Arxiv_Analysis/arxiv.RData")
load("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/Arxiv_Analysis/Arxiv_results.RData")
tab.labels <- read.table(file = "/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/Arxiv_Analysis/arxiv_netscience_layers.txt", sep = " ", header = TRUE)
labels <- tab.labels$layerLabel
labels
layer.labels <- tab.labels$layerLabel
save(Adjacency, layer.labels, file = "arXiv.RData")
rm(list = ls())
load("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/EU_Air_Analysis/EU_Air_Data.RData")
airport.data <- read.table(file = "/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/EU_Air_Analysis/EUAir_Multiplex_Transport/Dataset/EUAirTransportation_layers.txt")
airport.data
airport.data <- read.table(file = "/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/EU_Air_Analysis/EUAir_Multiplex_Transport/Dataset/EUAirTransportation_layers.txt", header = TRUE)
type <- read.table(file = "/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/EU_Air_Analysis/EUAir_Multiplex_Transport/Dataset/air-type.txt")
type <- read.table(file = "/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction/Data_Analysis/Real Applications/EU_Air_Analysis/EUAir_Multiplex_Transport/Dataset/air-type.txt", header = TRUE)
type
order(type$id)
type = type[order(type$id), ]
type
data <- cbind(type[, 2:3], airport.data)
data
labels <- data
save(Adjacency, layer.labels, file = "EU_Airport.RData")
layer.labels <- data
save(Adjacency, layer.labels, file = "EU_Airport.RData")
library("devtools")
library(roxygen2)
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
rm(list = ls())
create("multilayer_extraction")
create("MultilayerExtraction")
x <- matrix(runif(n = 100), 10, 10)
x
median(x)
mean(x)
which(x > 0.555)
adj.sum <- x
med.connection = median(as.matrix(adj.sum))
med.connection
thresh = function(x, median.connection, m){
#random choice of layer set
layer.set = sample(1:m, ceiling(m/2))
#vertex set is for those with higher than median connection
vertex.set <- which(x > median.connection)
return(list(vertex.set = vertex.set, layer.set = layer.set))
}
neighborhoods <- apply(adj.sum, 1, thresh, med.connection, m)
m = 1
neighborhoods <- apply(adj.sum, 1, thresh, med.connection, m)
neighorhoods
neighborhoods
thresh = function(x, m){
#random choice of layer set
layer.set = sample(1:m, ceiling(m/2))
mean.connection <- mean(x) #mean connection of the given vertex
#vertex set is for those with higher than median connection
vertex.set <- which(x > mean.connection)
return(list(vertex.set = vertex.set, layer.set = layer.set))
}
neighborhoods <- apply(adj.sum, 1, thresh, m)
neighborhoods
y <- adj.sum[1,]
y
which(y > mean(y))
setwd("./MultilayerExtraction")
document()
document()
document()
setwd("./MultilayerExtraction")
document()
document()
setwd("./MultilayerExtraction2")
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
setwd("./MultilayerExtraction2")
document()
rm(list = ls())
library(devtools)
library(roxygen2)
install_github('multilayer_extraction','jdwilson4')
library(MultilayerExtraction)
?multilayer.extraction
data(AU_CS)
data("AU_CS")
install_github('jdwilson4/multilayer_extraction')
library(MultilayerExtraction)
?multilayer.extraction
?AU_CS
?AU.CS
data("AU_CS")
data(AU_CS)
AU_CS
data(AU_CS.RData)
load(AU_CS.Rdata)
data(AU_CS.Rdata)
devtools::install_github('jdwilson4/multilayer_extraction')
library(MultilayerExtraction)
setwd("./MultilayerExtraction")
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
setwd("./MultilayerExtraction")
document()
install.packages("RCurl")
library(RCurl)
AU_CS.link <- getURL("https://raw.github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
load(AU_CS.link)
AU_CS.link
AU_CS.link <- load("https://raw.github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
load(text = AU_CS.link)
AU_CS.link <- load("https://github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
AU_CS.link <- load(url("https://github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
)
download.file("https://github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
download.file("https://github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata", "AU_CS")
load("AU_CS")
AU_CS.url <- "https://raw.github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata"
x <- getURL("https://github.com/jdwilson4/multilayer_extraction/data/AU_CS.Rdata")
x
load(x)
?source_url
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
setwd("./MultilayerExtraction")
document()
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
setwd("./MultilayerExtraction")
document()
setwd("/Users/jdwilson4/Dropbox/Research/Multilayer_Extraction")
setwd("./MultilayerExtraction")
document()
devtools::install_github('jdwilson4/multilayer_extraction')
library(MultilayerExtraction)
?AU_CS
data(AU_CS)
data("AU_CS")
library(MultilayerExtraction)
?multilayer.extraction
devtools::install_github('jdwilson4/multilayer_extraction')
rm(list = ls())
data("AU_CS")
data('AU_CS')
data(AU_CS)
